#-------------------------------------------------------------------------
# AUTHOR: Akshith Madugula
# FILENAME: bagging_random_forest
# SPECIFICATION: comparing single, ensemble and random forest performance.
# FOR: CS 5990- Assignment #4
# TIME SPENT: 25mins
#-----------------------------------------------------------*/

#importing some Python libraries
from sklearn import tree
from sklearn.utils import resample
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
import numpy as np

dbTraining = []
dbTest = []
X_training = []
y_training = []
classVotes = [] #this array will be used to count the votes of each classifier

#reading the training data from a csv file and populate dbTraining
training_path = r"Assignment4\optdigits.tra"
dbTraining = pd.read_csv(training_path, sep=',', header=None)   #reading a dataset(Pandas library)

#reading the test data from a csv file and populate dbTest
testing_path = r"Assignment4\optdigits.tes"
dbTest = pd.read_csv(testing_path, sep=',', header=None)

#inititalizing the class votes for each test sample. Example: classVotes.append([0,0,0,0,0,0,0,0,0,0])
classVotes=[0,0,0,0,0,0,0,0,0,0]

print("Started my base and ensemble classifier ...")

for k in range(20): #we will create 20 bootstrap samples here (k = 20). One classifier will be created for each bootstrap sample

  bootstrapSample = resample(dbTraining, n_samples=len(dbTraining), replace=True)

  #populate the values of X_training and y_training by using the bootstrapSample
  X_training = np.array(bootstrapSample.values)[:,:64]
  y_training = np.array(bootstrapSample.values)[:,-1]

  #fitting the decision tree to the data
  clf = tree.DecisionTreeClassifier(criterion = 'entropy', max_depth=None) #we will use a single decision tree without pruning it
  clf = clf.fit(X_training, y_training)

  correct_single_model_predictions = 0
  for i, testSample in enumerate(dbTest):

      #make the classifier prediction for each test sample and update the corresponding index value in classVotes. For instance,
      # if your first base classifier predicted 2 for the first test sample, then classVotes[0,0,0,0,0,0,0,0,0,0] will change to classVotes[0,0,1,0,0,0,0,0,0,0].
      # Later, if your second base classifier predicted 3 for the first test sample, then classVotes[0,0,1,0,0,0,0,0,0,0] will change to classVotes[0,0,1,1,0,0,0,0,0,0]
      # Later, if your third base classifier predicted 3 for the first test sample, then classVotes[0,0,1,1,0,0,0,0,0,0] will change to classVotes[0,0,1,2,0,0,0,0,0,0]
      # this array will consolidate the votes of all classifier for all test samples
      predicted = int(clf.predict([dbTest.iloc[i,:64]])[0])
      classVotes[predicted] +=1

      if k == 0: #for only the first base classifier, compare the prediction with the true label of the test sample here to start calculating its accuracy
         if predicted == dbTest.iloc[i,-1]: # if perdicted is corrent
            correct_single_model_predictions+=1
  if k == 0: #for only the first base classifier, print its accuracy here
     accuracy = correct_single_model_predictions / len(dbTest.index) # correct predicted / total
     print("Finished my base classifier (fast but relatively low accuracy) ...")
     print("My base classifier accuracy: " + str(accuracy))
     print("")

#now, compare the final ensemble prediction (majority vote in classVotes) for each test sample with the ground truth label to calculate the accuracy of the ensemble classifier (all base classifiers together) 
ground_truth_label_counts = [0,0,0,0,0,0,0,0,0,0]
ground_truth_labels = dbTest.iloc[:,-1]
for each in ground_truth_labels:
   ground_truth_label_counts[int(each)] += 1


errors = 0
for i in range(10):
    errors += abs(classVotes[i] - ground_truth_label_counts[i])

accuracy = 1 - (errors / len(dbTest.index))

#printing the ensemble accuracy here
print("Finished my ensemble classifier (slow but higher accuracy) ...")
print("My ensemble accuracy: " + str(accuracy))
print("")

print("Started Random Forest algorithm ...")

#Create a Random Forest Classifier
X_test = np.array(dbTest.values)[:,:64]    #getting the first 64 fields to form the feature data for test
y_test = np.array(dbTest.values)[:,-1]
clf=RandomForestClassifier(n_estimators=20) #this is the number of decision trees that will be generated by Random Forest. The sample of the ensemble method used before

#Fit Random Forest to the training data
clf.fit(X_training,y_training)

#make the Random Forest prediction for each test sample. Example: class_predicted_rf = clf.predict([[3, 1, 2, 1, ...]]
correct_random_forest_predictions = 0
for x, y in zip(X_test, y_test):
      predicted = clf.predict([x])[0]

#compare the Random Forest prediction for each test sample with the ground truth label to calculate its accuracy
      if predicted == y:
          correct_random_forest_predictions += 1

accuracy = correct_random_forest_predictions / len(dbTest.index)
#printing Random Forest accuracy here
print("Random Forest accuracy: " + str(accuracy))

print("Finished Random Forest algorithm (much faster and higher accuracy!) ...")
